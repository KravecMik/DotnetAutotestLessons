//Это пространство имен. Используется для структурирования классов. Попробуй создать папку в проекте и внутри неё файл с расширением cs. Напиши название созданного класса внутри метода Main и посмотри что будет.
//Благодаря пространству имен, компилятор понимает из какой папочки ты хочешь использовать тот или иной кусок кода.
//Попробуй убрать появившийся using и посчмотри что будет. Спойлер - ошибка.
//Отключить в свойствах проекта параметр ImplicitUsings и посмотреть что будет
namespace Lesson1
{
    //Это называется класс. Чуть дальше будем разбирать для чего он нужен конкретно, но на данном этапе важно понимать, что в стандартных приложухах (не связанными с автотестами) 
    //класс Program обязательный. С него и начинается запуск программы.

    internal class Program
    {
        //Это называется метод. Грубо говоря, какое то записанное действие. Без него программа не соберется.
        static void Main(string[] args)
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //В процессе изучения мы будем пользоваться дебаггером (в простонародье дебажить), чтобы не на словах, а визуально понимать что происходит с нашей программой и её данными.
            //Как вы поняли, выполнение программы идет сверху в низ в методе Main. А это значит, что можно с помощью брейкпоинта "остановить" выполнения кода на определенной строке
            //и посмотреть что происходит в моменте.Для этого слева от номера строки нужно отвести курсор и там появится точка. Нажимаешь ее и она загорается красным. Точка остановки поставлена.
            //На комментариях точку поставить нельзя, т.к они пропускаются компилятором при сборке.

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //В случае, если в процессе сборки приложения будут какие то ошибки критичные возникать, то они будут в коде подсвечиваться красным цветом и внизу можно увидеть и выводиться внизу в консоли.
            //Есть еще тип ошибок с типом Warnings - это просто вижла бухтит что ей что то не нравится, но сборке такие ошибки не мешают никак, так что все истинные автотестеры и программисты на них внимания не обращают

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Горячие клавиши при работе:
            //ctrl + shift + b  - сделать билд проекта
            //ctrl + f - найти что то в открытом файле. Будете искать домашку по: ДОМАШНЕЕ ЗАДАНИЕ . Просто выдели эти слова полностью и ктрл ф жмякни.
            //ctrl + c, ctrl + v - это вообще база всего программирования. Копировать вставить
            //ctrl + z - отменить то, что ты только что натворил. Перейти на шаг назад.

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Комментарии - пропускаются компилятором при билде программы. Сюда можно писать всякие пометки, черновики, но лучше лишний раз не мусорить.
            //Есть однострочные комментарии и многострочные:
            //Однострочне - выглядят так. Два слеша и какой то текст.

            /* 
            Многострочный комментарий выглядит так.
            Можно писать несколько строк текста без слешей,
            но, в основном, все юзают однострочный.
            Можно в вижле выделить участок кода или текста и нажать на кнопочку Comment. А рядом с ней есть кнопка, которая коммент убирает. Этим я чаще всего пользуюсь.
            */

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Код стайл - это набор правил как писать код, чтобы он был единообразным и читаемым. У всех он разный на проектах, но, в целом, для языка есть несколько общих: 

            //Как правильно писать на C#. Классы и методы - все слова с большой буквы. Переменные и свойства с маленькой.

            //Пример правильного написания:
            //class BankAccount - Каждое слово с большой буквы (UpperCamelCase)
            //{
            ////
            //    private string accountNumber; - Первое слово переменных класса пишется с маленькой, а дальше с большой (LowerCamelCase)

            //    public void CalculateInterest() - Методы, как и классы, с большой буквы каждое слово
            //    {
            //        double totalAmount = 1000.0; - Переменные в методах: первое слово с маленькой, а остальные с большой
            //    }
            //}

            //Как писать НЕ правильно:
            //class bank_account 
            //{
            //    private string AccountNumber;
            //}

            Console.WriteLine($"Hello World"); // - Явный пример - это метод WriteLine, который встречает при создании проекта.

            //В Java, например, методы пишутся так - public void calculateInterest(). Выглядит не очень, на мой взгляд.
            //System.out.println("Hello World");

            //Так же давайте поговорим немного про то, как обзывать переменные, классы, методы. Принято их называть по существу, описывая, в случае переменной, что она в себе хранит и зачем, а метод - что он делает
            //Плохие наименования пораждают непонимание и приходится тратить время на разбор того, что происходит в коде. Другие пытаются добавлять комментарии, но это еще больше читаемость убивает. Это называется говнокод, так писать нельзя.
            //Запомни: с хорошими названиями - комментарии не нужны.

            //Разберем на примере котика в силу правильного нейминга:

            ////Переменные
            //int pawsNumber = 4; // - Количество лапок у котика. Все предельно понятно
            //int a = 4; // - Что это значит вообще и для чего?

            //Классы
            //Cat - У нас информация про котика в классе описана
            //Class1 - хз что там. Нужно заходить внутрь и разбираться

            //Методы
            //public bool IsCatHaveFourPaws() - Понятно, что в методе мы проверяем есть ли у кота 4 лапы. Если у нас ответ должен содержать либо да, либо нет (true/false), то тогда обычно пишут в начале Is. Без знаков вопроса)
            //public bool IsCorrect() - Тут вроде тоже проверяем корректно что то или нет, но что именно - загадка

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Если кодстайл это про красоту и читаемость и никак не влияет на сборку приложения, то есть вещи, которые могут заставить кодера плакать при попытке запустить приложение

            ////Самое первое и главное - это точка запятой после каждой строчки кода (;) Благодаря ей компилятор понимает где закончилась строка, чтобы перейти к следующей 
            //int az = 50; // - правильно
            //int a = 50 // - ошибка синтаксиса

            ////Как видит компилятор код с точкой с запятой:
            //int quantity = 10;
            //Console.WriteLine("Привет");
            //quantity++;

            ////А вот как видит компилятор код БЕЗ точки с запятой:
            //int quantity = 10 Console.WriteLine("Привет") quantity++

            //Так же важную роль играют фигурные скобки { }. Они как бы связывают элементы в одну группу и показывают где её начало и конец.
            //Сейчас же в качестве примера можно посмотреть на этот файл program.cs. Здесь namespace имеет свои фигурные скобки, внутри которой помещен class, который тоже имеет свое начало и конец
            //Методы у нас тоже имеют свое начало и конец (как например метод Main). Методы - это, грубо говоря, какие то действия, которые мы описали. А действие есть начало и конец, поэтому скобки
            //А вот переменным скобки не нужны. Хватает только (;). Но не переживайте, если где то пропустите (;) или {}, то получите ошибку компиляции (перевода вашего кода в машинный) и программа не запустится :)

            ////Так же нельзя называть переменные - числами.
            //int 23 = 55; // - Будет ошибка

            ////Но можно называть их так:
            //int a23 = 55;

            ////Названия переменных в C# регистрозависимы!
            //int a = 2; //- Это две разных переменных
            //int A = 50; //- Это две разных переменных

            //string strLol; //- Это две разных переменных
            //string StrlOl; //- Это две разных переменных

            //Так же нельзя писать в одну строку выражения, где (;) обязательна:
            //byte маленькоеЧисло = 255; short короткоеЧисло = 32000; - Ошибка   

            //ДОМАШНЕЕ ЗАДАНИЕ: доведи компилятор до истерики. Наделай ошибок со скобками, точкой с запятой, всякую фигню попиши и попробуй скормить это компилятору.

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            ////Переменная - это область в памяти, которую мы резервируем для вычислений. От типа переменной зависит и то, что какие операции можем проводить над данными. Есть такие понятия как обьявление переменной и её инициализация. 
            ////Объявление - это когда мы говорим, что мне нужно выделить память определенного типа для своих дальнейших нужд.
            ////Например, выделить память, чтобы записать в будущем результат ответа сервиса для автотестов.
            //int value;

            ////Инициализация - это когда мы записываем какое то значение в переменную. Нельзя использовать переменные без значений - получишь ошибку.
            //Console.WriteLine(value); // - Ошибка. Нельзя использовать неинициированную переменную. В ней же нет ничего, как использовать?

            ////Как компилятор понимает сколько именно памяти нужно приберечь? В основном, у всех типов переменных есть минимальные и максимальные значения
            ////И, исходя из этого, он уже прикидывает какой размер максимально ты можешь записать в нее
            //int intMin = int.MinValue;
            //int intMax = int.MaxValue;

            ////Что будет, если записать значение, большее чем дозволено? 
            //int error = int.MaxValue + 1; // Ошибочка. Так как инт нужен для точных вычислений, то он строго ограничен

            ////Если прям нужны большие числа, то можно использовать тип переменных long, в который можно запихать число и покрупнее
            //long largeNumMin = long.MinValue;
            //long largeNumMax = long.MaxValue;

            //Строки string НЕ имеют ограничения по размеру, т.е туда можно записать любое количество символов.
            //Сама по себе строка состоит из символов, которые называются char. Инициализируются в одинарных ковычках и может содержать ТОЛЬКО один символ.
            //char charExample = '%';
            //char charExample2 = '%п'; // Ошибка

            //string example = "amogus";
            //Можно представить как чары a m o g u s

            //Числа так же могут быть целыми как int или не целыми. double, decimal - как раз созданы для оперирования не целыми числами.

            //double используется для быстрых подсчетов с округлением.
            //decimal для более точных рассчетов (например, чтобы считать денежки).

            //double sumDouble = 19.99 + 5.50 + 2.25;
            //decimal sumDecimal = 19.99m + 5.50m + 2.25m;
            //Console.WriteLine($"double: {sumDouble}"); // Одинаковый результат, так как нет деления и операция простая
            //Console.WriteLine($"decimal: {sumDecimal}");

            //double divisionDouble = 1.0 / 3.0;
            //decimal divisionDecimal = 1.0m / 3.0m;
            //Console.WriteLine($"double: {divisionDouble}"); // Округляет
            //Console.WriteLine($"decimal: {divisionDecimal}"); // Более точный

            //В реальной жизни вы не будете создавать переменные в автотестах таким образом. Сейчас познакомимся с волшебным словом var
            //Так как компилятор у нас умный и может определить какой тип переменных находится в значении переменных (ошибки же он как то отображает), значит, в целом, можно явно не указывать типы переменных
            //при инициализации, а вместо этого написать волшебное слово var и во время сборки проекта компилятор автоматически подставит нужный тип. Очень удобно

            ////Пример: 
            //int numberOne = 777; // - Вместо такой записи
            //var numberTwo = 777; // - Можно написать так. Это будет равносильно

            //string strExample = "Test";
            //var strExample2 = "Test";

            ////Так же не нужно париться над типом данных и бояться влезет ли значение или нет: 
            //int error = 75675675654356; // - Будет ошибка, т.к значение больше максимально доступного для инта
            //var noError = 75675675654356; // - Ошибки нет, т.к компилятор поймет, что данное значение поместится только в тип long

            ////Но, например, так писать нельзя. Так как как понять какой тип ты хочешь туда поместить?
            //var number;

            ////Что можно делать с переменными? С числами все то же самое, что и в реальной жизни
            //var a = 1;
            //var b = 2;

            //var c = a + b;
            //var d = a / b;
            //var e = a * b;

            ////Строки можно соединять. На самом деле есть куча способов взаимодействия, но это потом
            //var f = "Hello";
            //var g = "World";
            //var h = f + g; //Посмотри под дебагером что получится

            //Все существующие типы данных:
            //1. Целочисленные типы
            byte маленькоеЧисло = 255;          // 0 до 255 (1 байт)
            short короткоеЧисло = 32000;        // -32768 до 32767 (2 байта)
            int число = 2147483647;             // -2 млрд до 2 млрд (4 байта)
            long большоеЧисло = 9223372036854775807; // Очень большое (8 байт)

            sbyte отрицательноеМаленькое = -128; // -128 до 127
            ushort беззнаковоеКороткое = 65535;  // 0 до 65,535
            uint беззнаковоеЧисло = 4294967295;  // 0 до 4 млрд
            ulong огромноеЧисло = 18446744073709551615; // Огромное беззнаковое

            //2. Дробные числа
            float дробное = 3.14f;              // 7 знаков после запятой (4 байта)
            double точноеДробное = 3.1415926535; // 15-16 знаков (8 байт) - самый популярный!
            decimal дляДенег = 999.99m;         // 28-29 знаков (16 байт) - для точных расчетов

            //3. Логический тип
            bool правда = true;
            bool ложь = false;
            bool правдаИлиЛожь = 5 > 3; // true

            //4. Символьный тип
            char символ = 'A';
            char числоChar = '9';

            //5.Дата
            DateTime сегодня = DateTime.Now;
            DateOnly дата = new DateOnly(2023, 10, 15);
            TimeSpan промежуток = TimeSpan.FromHours(2.5);

            //6.Строки
            string текст = "Привет мир!";
            string пустаяСтрока = "";
            string nullСтрока = null;

            //7. Массивы
            int[] числа = { 1, 2, 3, 4, 5 };
            string[] имена = { "Аня", "Боря", "Вова" };
            double[,] матрица = new double[2, 2];

            //8. Классы
            //class Person
            //{
            //    public string Name;
            //    public int Age;
            //}

            //Person человек = new Person();

            //9.Коллекции
            List<string> список = new List<string>();
            Dictionary<string, int> словарь = new Dictionary<string, int>();

            //ДОМАШНЕЕ ЗАДАНИЕ: Поиграйся с переменными под дебаггером: попробуй их поскладывать, поотнимать, поделить и прочие штуки и посмотри где какие значения записываются.

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            ////C# - это строго типизированный язык.
            ////Если ты создал переменную с одним типом, то поменять его по ходу программы на другой не получится никак. Получишь ошибку

            //int value = 69;
            //value = "cat"; // - Ошибка. Ты попытался в переменную с численным типом записать строку. Совсем чтоле?

            ////НО, если ты создашь новую переменную, то с помощью метода ToString() сможешь сконвертировать число в строку. Да и вообще все что угодно превратить в строку.
            //int valueInt = 69;
            //string valueString = valueInt.ToString(); // Будет значение "69"

            //bool boolya = false;
            //string valueBool = boolya.ToString(); // Что будет?

            //ДОМАШНЕЕ ЗАДАНИЕ: создать переменные с разными типами и сконвертировать их в string с помощью метода ToString() и посмотреть что выведется.

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Прикольчики

            ////C# - это объектно ориентированный язык, но что это значит?
            ////Проще говоря ООП - это способ программирования, где всё представляется в виде объектов как в реальном мире. И все типы переменных тоже наследуются от object. Типа есть нечто, какой то материал
            ///типа глины из которого мы можем слепить котенка и придать ему какие то свойства, присущие котенку. Примерно так с нами спагетти монстр из космоса и сделал.
            ///В дебри пока погружаться не будем, поэтому просто
            ////Докажем на примере переменных что это так

            //object число = 5; //Так можно
            ////число = "hfdgh"; //Даже так можно, так как тут уже мы не указываем тип данных с их ограничениями
            //object строка = "5"; //Так тоже можно
            //object булик = false; //Так тоже можно

            ////Давайте посмотрим какой тип данных определил компилятор для таких переменных. Как видим, компилятор прекрасно понял тип данных внутри переменной
            //Console.WriteLine(intNum.GetType().ToString() + Environment.NewLine + stringStr.GetType().ToString() + Environment.NewLine + boolBl.GetType().ToString());

            //Так же существует еще один особый тип с названием dynamic. Никогда про него не слышал и никогда не использовал. Но он плюет на строгую типизацию и позволяет поменять тип переменной налету
            dynamic чтоУгодно = 10;
            чтоУгодно = "теперь строка";
            //чтоУгодно = new Person(); // Может быть чем угодно!


            //Показать как работает гит, основные команды и как вот этот проект им себе подкачать.
            //Гит это типа яндекс диска в котором хранится код. Ты можешь его скачивать, править, подливать себе чужие изменения.
            //Разновидности это git, gitlab, bitbucket и еще целая куча, но все работают примерно одинакого
        }
    }
}
